// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    
	Array.prototype.mfRemove = function(obj) {
		for(var i in this) {
			if(this[i] === obj){
				this.splice(i, 1);
				return;
			}
		}
	};
	;
    var $dropdown_authorization, $dropdown_session, $list_authorization, $list_session, $logBox, $logFilterE, $logFilterI, $logFilterW, WebClient, addAcctiveSession, addListItem, isFilterChecked, makeClosure_LogFilter, onBorn, onDied, onDisconnect, onInit, onLog, onReady, removeActiveSession, selectAuthorization, selectSession, server, updateOnlineStateDOM, updateQuickEntriesDOM, webClient;
    WebClient = (function() {
      function WebClient() {
        this.authorizations = [];
        this.sessions = [];
        this.currentAuthorization = null;
        this.currentSession = null;
        this.activeSessions = [];
        this.logs = [];
      }

      WebClient.prototype.getLog = function(logId) {
        var log, strLogId;
        while (!(this.logs.length > logId)) {
          this.logs.push(null);
        }
        if (this.logs[logId] === null) {
          log = {
            id: logId,
            type: '_',
            message: null,
            trace: null
          };
          strLogId = "0000" + logId;
          strLogId = strLogId.substring(strLogId.length - 4);
          log.$messageLine = $("<td></td>");
          log.$dom = $("<tr>\n	<td style=\"width:60px\">" + strLogId + "</td>\n</tr>");
          log.$dom.append(log.$messageLine);
          this.logs[logId] = log;
        }
        return this.logs[logId];
      };

      WebClient.prototype.addLog = function(logId, logType, logMessage) {
        var log;
        log = this.getLog(logId);
        log.type = logType;
        log.message = logMessage;
        log.$messageLine.html(logMessage);
        switch (logType) {
          case 'I':
            log.$dom.addClass("log-message-info");
            break;
          case 'W':
            log.$dom.addClass("log-message-warning");
            break;
          case 'E':
            log.$dom.addClass("log-message-danger");
        }
        if (!isFilterChecked(logType)) {
          log.$dom.addClass("hidden");
        }
        $logBox.append(log.$dom);
        return $("body,html").animate({
          scrollTop: $(window).height()
        }, 10);
      };

      WebClient.prototype.addTrace = function(logId, logTrace) {
        var log;
        log = this.getLog(logId);
        return log.trace = logTrace;
      };

      WebClient.prototype.sessionById = function(id) {
        var session, _i, _len, _ref;
        _ref = this.sessions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          session = _ref[_i];
          if (session.id === id) {
            return session;
          }
        }
      };

      return WebClient;

    })();
    $logBox = $("#logBox");
    $dropdown_authorization = $("#dropdown_authorization");
    $dropdown_session = $("#dropdown_session");
    $list_authorization = $("#list_authorization");
    $list_session = $("#list_session");
    $logFilterI = $("#logFilterI");
    $logFilterW = $("#logFilterW");
    $logFilterE = $("#logFilterE");
    webClient = new WebClient();
    isFilterChecked = function(logType) {
      return $("#logFilter" + logType).hasClass("active");
    };
    addListItem = function($list, text, callback) {
      var $id, id;
      id = Math.ceil(Math.random() * 10000000 + 10000000).toString();
      $list.append("<li role=\"presentation\">\n	<a href=\"#\" role=\"menuitem\" tabIndex=\"-1\" id=\"" + id + "\">\n		" + text + "\n	</a>\n</li>");
      $id = $("#" + id);
      return $id.click(callback);
    };
    updateQuickEntriesDOM = function() {
      var $btn, $buttons, $dropdown_more, $list_more, callback, index, makeClosure, session, text, _results;
      $buttons = $(".quick-entry-button");
      $buttons.children().html("-");
      $buttons.attr("disabled", "disabled");
      $dropdown_more = $("#dropdown_more");
      $dropdown_more.attr("disabled", "disabled");
      $list_more = $("#list_more");
      $list_more.empty();
      _results = [];
      for (index in webClient.activeSessions) {
        session = webClient.activeSessions[index];
        text = session.authorization;
        makeClosure = function(_session) {
          return function() {
            selectAuthorization(_session.authorization);
            return selectSession(_session);
          };
        };
        callback = makeClosure(session);
        if (index > 5) {
          $dropdown_more.removeAttr("disabled");
          _results.push(addListItem($list_more, text, callback));
        } else {
          $btn = $($buttons[index]);
          $btn.removeAttr("disabled");
          $btn.click(callback);
          $btn.children().html(text);
          $btn.attr("title", session.title);
          _results.push($btn.tooltip());
        }
      }
      return _results;
    };
    updateOnlineStateDOM = function() {
      if (webClient.currentSession.isActive) {
        $(".navbar-left>.label-success").removeClass("hidden");
        return $(".navbar-left>.label-default").addClass("hidden");
      } else {
        $(".navbar-left>.label-success").addClass("hidden");
        return $(".navbar-left>.label-default").removeClass("hidden");
      }
    };
    addAcctiveSession = function(session) {
      webClient.activeSessions.unshift(session);
      return session.isActive = true;
    };
    removeActiveSession = function(session) {
      webClient.activeSessions.mfRemove(session);
      session.isActive = false;
      return updateOnlineStateDOM();
    };
    selectAuthorization = function(authorization) {
      var makeClosure, session, _i, _len, _ref, _results;
      webClient.currentAuthorization = authorization;
      $("#dropdown_authorization>.pull-left").html("Authorization: " + authorization);
      $list_session.empty();
      $dropdown_session.attr("disabled", "disabled");
      _ref = webClient.sessions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        session = _ref[_i];
        if (!(session.authorization === authorization)) {
          continue;
        }
        $dropdown_session.removeAttr("disabled");
        makeClosure = function(_session) {
          return function() {
            return selectSession(_session);
          };
        };
        _results.push(addListItem($list_session, session.title, makeClosure(session)));
      }
      return _results;
    };
    selectSession = function(session) {
      if (session === webClient.currentSession) {
        return;
      }
      webClient.currentSession = session;
      $("#dropdown_session>.pull-left").html("Session: " + session.title);
      $("#currentSession").html("" + session.title + "@" + session.authorization);
      server.send("INSPECT," + session.id);
      return updateOnlineStateDOM();
    };
    onInit = function(obj) {
      var appendLogMessage, authorization, makeClosure, sessionId, _i, _j, _len, _len1, _ref, _ref1;
      webClient.authorizations = obj.authorizations;
      webClient.sessions = obj.sessions;
      _ref = webClient.authorizations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        authorization = _ref[_i];
        makeClosure = function(_auth) {
          return function() {
            return selectAuthorization(_auth);
          };
        };
        addListItem($list_authorization, authorization, makeClosure(authorization));
      }
      _ref1 = obj.activeSessions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        sessionId = _ref1[_j];
        addAcctiveSession(webClient.sessionById(sessionId));
      }
      updateQuickEntriesDOM();
      if (webClient.authorizations.length > 0) {
        $dropdown_authorization.removeAttr("disabled");
      }
      appendLogMessage = function(str) {
        $logBox.append("<div>" + str + "</div >");
        return $("body,html").animate({
          scrollTop: $(window).height()
        }, 10);
      };
      appendLogMessage("Initialization completed.");
      appendLogMessage("TODO: Export txt file");
      appendLogMessage("TODO: Init complete animation.");
      appendLogMessage("TODO: Trace toggle");
      return appendLogMessage("TODO: Trace expanding button");
    };
    onReady = function(logs) {
      var log, _i, _len, _results;
      $logBox.empty();
      _results = [];
      for (_i = 0, _len = logs.length; _i < _len; _i++) {
        log = logs[_i];
        _results.push(webClient.addLog(log.id, log.type, log.message));
      }
      return _results;
    };
    onLog = function(log) {
      return webClient.addLog(log.id, log.type, log.message);
    };
    onBorn = function(session) {
      webClient.sessions.push(session);
      addAcctiveSession(session);
      updateQuickEntriesDOM();
      if (webClient.currentAuthorization !== null) {
        return selectAuthorization(webClient.currentAuthorization);
      }
    };
    onDied = function(id) {
      removeActiveSession(webClient.sessionById(id));
      return updateQuickEntriesDOM();
    };
    onDisconnect = function() {
      $(".dropdown>.dropdown-toggle").attr("disabled", "disabled");
      $(".quick-entry-button").attr("disabled", "disabled");
      return $(".panel.panel-primary").parent().html("<div class=\"alert alert-danger\">Disconnected from server.</div>");
    };
    $(".logFilterRadio").parent().addClass("active");
    makeClosure_LogFilter = function(logType, logClassName) {
      return function() {
        var callback;
        callback = function() {
          if (isFilterChecked(logType)) {
            return $(logClassName).removeClass("hidden");
          } else {
            return $(logClassName).addClass("hidden");
          }
        };
        return setTimeout(callback, 0);
      };
    };
    $logFilterI.click(makeClosure_LogFilter("I", ".log-message-info"));
    $logFilterW.click(makeClosure_LogFilter("W", ".log-message-warning"));
    $logFilterE.click(makeClosure_LogFilter("E", ".log-message-danger"));
    server = io.connect(window.location.origin, {
      reconnect: false
    });
    return server.on("connect", function() {
      server.on("message", function(msg) {
        return console.log("ClientRecieveMessage: " + msg);
      });
      server.on("init", onInit);
      server.on("ready", onReady);
      server.on("log", onLog);
      server.on("born", onBorn);
      server.on("died", onDied);
      server.on("disconnect", onDisconnect);
      return server.send("WEB");
    });
  });

}).call(this);
